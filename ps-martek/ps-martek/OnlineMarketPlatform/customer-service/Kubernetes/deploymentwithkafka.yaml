#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: inventoryservice
#spec:
#  replicas: 2
#  selector:
#    matchLabels:
#      app: inventoryservice
#  template:
#    metadata:
#      labels:
#        app: inventoryservice
#    spec:
#      containers:
#        - name: inventoryservice
#          image: psbijaya/inventory-service:1.0
#          ports:
#            - containerPort: 8080
#          #      imagePullSecrets:
#          #        - name: psdocsecrert
#          #          env:
#          #            - name: TITLE
#          #              value: "AKS Ingress Demo for Order service"
#          env: # Setting Enviornmental Variables
#            - name: DB_HOST   # Setting Database host address from configMap
#              valueFrom:
#                configMapKeyRef:
#                  name: inventory-db-config
#                  key: host
#            - name: DB_NAME  # Setting Database name from configMap
#              valueFrom:
#                configMapKeyRef:
#                  name: inventory-db-config
#                  key: dbName
#            - name: DB_USERNAME  # Setting Database username from Secret
#              valueFrom:
#                secretKeyRef:
#                  name: mysql-secrets
#                  key: username
#            - name: DB_PASSWORD # Setting Database password from Secret
#              valueFrom:
#                secretKeyRef:
#                  name: mysql-secrets
#                  key: password
#            - name: KAFKA-CONFIG_BOOTSTRAP-SERVERS
#              value: "local-confluent-kafka-cp-kafka-headless:9092"
#          resources:
#            limits:
#              cpu: "500m"
#              memory: "256Mi"
#            requests:
#              cpu: "200m"
#              memory: "256Mi"
#
#---
#apiVersion: v1 # Kubernetes API version
#kind: Service # Kubernetes resource kind we are creating
#metadata: # Metadata of the resource kind we are creating
#  name: inventoryservicelb
#spec:
#  selector:
#    app: inventoryservice
#  ports:
#    - protocol: "TCP"
#      port: 8080 # The port that the service is running on in the cluster
#      targetPort: 8080 # The port exposed by the service
#status:
#  loadBalancer: { }
##  type: NodePort # type of the service.