## Define a 'Persistent Voulume Claim'(PVC) for Mysql Storage, dynamically provisioned by cluster
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: mysql-inventory-pv-claim # name of PVC essential for identifying the storage data
#  labels:
#    app: mysql-inventory
#    tier: database
#spec:
#  accessModes:
#    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
#  resources:
#    requests:
#      storage: 1Gi    #This will tell kubernetes about the amount of space we are trying to claim.
#---
## Configure 'Deployment' of mysql server
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: mysql-inventory
#  labels:
#    app: mysql-inventory
#    tier: database
#spec:
#  replicas: 1
#  selector: # mysql Pod Should contain same labels
#    matchLabels:
#      app: mysql-inventory
#      tier: database
#  strategy:
#    type: Recreate
#  template:
#    metadata:
#      labels: # Must match 'Service' and 'Deployment' selectors
#        app: mysql-inventory
#        tier: database
#    spec:
#      containers:
#        - image: mysql:5.6 # image from docker-hub
#          args:
#            - "--ignore-db-dir=lost+found" # Workaround for https://github.com/docker-library/mysql/issues/186
#          name: mysql-inventory
#          env:
#            - name: MYSQL_ROOT_PASSWORD
#              value: root
#            - name: MYSQL_DATABASE # Setting Database Name from a 'ConfigMap'
#              value: inventorydb
#          ports:
#            - containerPort: 3309
#              name: mysql-inventory
#          volumeMounts:        # Mounting voulume obtained from Persistent Volume Claim
#            - name: mysql-inventory-persistent-storage
#              mountPath: /var/lib/mysql-inventory #This is the path in the container on which the mounting will take place.
#      volumes:
#        - name: mysql-inventory-persistent-storage # Obtaining 'vloume' from PVC
#          persistentVolumeClaim:
#            claimName: mysql-inventory-pv-claim
#---
## Define a 'Service' To Expose mysql to Other Services
#apiVersion: v1
#kind: Service
#metadata:
#  name: mysql-inventory  # DNS name
#  labels:
#    app: mysql-inventory
#    tier: database
#spec:
#  ports:
#    - port: 3307
#      targetPort: 3307
#  selector:       # mysql-inventory Pod Should contain same labels
#    app: mysql-inventory
#    tier: database
#  clusterIP: None  # We Use DNS, Thus ClusterIP is not relevant